// Anime emoji quizzes
const emojiQuizzes = [
    { emoji: "üêíüçëüëí‚öîÔ∏è", answer: "One Piece", hint: "Monkey, Peach, Hat, Sword" },
    { emoji: "üëìüçéüìì‚ò†Ô∏è", answer: "Death Note", hint: "Glasses, Apple, Notebook, Death" },
    { emoji: "üî∫üë®‚Äçüë¶üî¨üêç", answer: "Fullmetal Alchemist", hint: "Triangle, Father-Son, Science, Snake" },
    { emoji: "üë¶üåÄüëπüî¥", answer: "Naruto", hint: "Boy, Swirl, Demon, Red" },
    { emoji: "üë¶‚ö°üî®üá∫üá∏", answer: "Captain America", hint: "Boy, Lightning, Hammer, USA" },
    { emoji: "üë¶üî¥üëπ‚öîÔ∏è", answer: "Demon Slayer", hint: "Boy, Red, Demon, Sword" },
    { emoji: "üë¶ü¶∏‚Äç‚ôÇÔ∏èüí•üëä", answer: "My Hero Academia", hint: "Boy, Hero, Explosion, Punch" },
    { emoji: "üëßüê±üêæ‚ú®", answer: "Sailor Moon", hint: "Girl, Cat, Paw, Magic" },
    { emoji: "üë¶üëÅÔ∏èüî¥üëπ", answer: "Tokyo Ghoul", hint: "Boy, Eye, Red, Ghoul" },
    { emoji: "üë¶ü§ñüî´üéÆ", answer: "Sword Art Online", hint: "Boy, Robot, Gun, Game" },
    { emoji: "üë¶üêâüå™Ô∏èü•ã", answer: "Dragon Ball", hint: "Boy, Dragon, Whirlwind, Martial Arts" },
    { emoji: "üë¶üëªüî´üòé", answer: "Bleach", hint: "Boy, Ghost, Gun, Cool" },
    { emoji: "üë¶üß¢üèÄ‚õπÔ∏è", answer: "Kuroko's Basketball", hint: "Boy, Cap, Basketball, Player" },
    { emoji: "üë¶üç•üë∫üçú", answer: "Naruto", hint: "Boy, Fish Cake, Demon, Noodles" },
    { emoji: "üë¶üëëü§¥‚öîÔ∏è", answer: "Seven Deadly Sins", hint: "Boy, Crown, King, Sword" }
];

// Store active emoji quizzes
const activeEmojiQuizzes = new Map();

module.exports = {
    name: 'emoji-quiz',
    description: 'Guess the anime from emojis',
    command: 'emoji',
    aliases: ['eq', 'guess'],
    usage: '.emoji',
    cooldown: 15,
    
    async execute(sock, message, args) {
        const jid = message.key.remoteJid;
        
        // Check if there's an ongoing quiz
        if (activeEmojiQuizzes.has(jid)) {
            await sock.sendMessage(jid, {
                text: '‚ùå There is already an ongoing emoji quiz in this chat!'
            }, { quoted: message });
            return;
        }
        
        try {
            // Select random emoji quiz
            const randomQuiz = emojiQuizzes[Math.floor(Math.random() * emojiQuizzes.length)];
            
            // Store the answer
            activeEmojiQuizzes.set(jid, {
                answer: randomQuiz.answer,
                emoji: randomQuiz.emoji,
                hint: randomQuiz.hint,
                startTime: Date.now()
            });
            
            const quizText = `üß© *Emoji Anime Quiz!*\n\n` +
                            `Guess the anime from these emojis:\n\n` +
                            `${randomQuiz.emoji}\n\n` +
                            `Reply with your answer!`;
            
            await sock.sendMessage(jid, {
                text: quizText
            }, { quoted: message });
            
            // Provide hint after 30 seconds
            setTimeout(async () => {
                if (activeEmojiQuizzes.has(jid)) {
                    const quiz = activeEmojiQuizzes.get(jid);
                    await sock.sendMessage(jid, {
                        text: `üí° Hint: ${quiz.hint}`
                    });
                }
            }, 30000);
            
            // End quiz after 2 minutes
            setTimeout(() => {
                if (activeEmojiQuizzes.has(jid)) {
                    const quiz = activeEmojiQuizzes.get(jid);
                    activeEmojiQuizzes.delete(jid);
                    
                    sock.sendMessage(jid, {
                        text: `‚è∞ Time's up! The answer was *${quiz.answer}*`
                    });
                }
            }, 120000);
            
        } catch (error) {
            console.error('Error starting emoji quiz:', error);
            await sock.sendMessage(jid, {
                text: '‚ùå Failed to start emoji quiz. Please try again later.'
            }, { quoted: message });
        }
    }
};

// Function to check emoji quiz answers
function checkEmojiAnswer(jid, answer) {
    const quiz = activeEmojiQuizzes.get(jid);
    if (!quiz) return false;
    
    // Simple check - in a real implementation, you might use fuzzy matching
    const isCorrect = answer.toLowerCase().includes(quiz.answer.toLowerCase());
    
    if (isCorrect) {
        activeEmojiQuizzes.delete(jid);
        return {
            isCorrect: true,
            answer: quiz.answer,
            emoji: quiz.emoji
        };
    }
    
    return { isCorrect: false };
}

module.exports.checkEmojiAnswer = checkEmojiAnswer;
